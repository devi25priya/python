import numpy as np   #creating numpy as an array
a=np.aaray([1,2,3,4])
print(a)
print(a.ndim)
print(a.shape)
print(a.dtype)

a=np.array(["abc",2,True,4.1])
print(a)
print(a.ndim)   #ndim---number of dimensions
print(a.shape)  #shape--rows*columns
print(a.dtype)   #u32 shows mixed datatype,64 if only integers

a=np.array([["abc",2,True,4.1],[1,2,3,4]])
print(a)
print(a.ndim)
print(a.shape)
print(a.dtype)

import numpy as np     #######this should be in the firts line for np#######

a=np.array([[[1,2],[2,3]],[[3,4],[4,5]]])
print(a)
print(a.ndim)
print(a.shape)
print(a.dtype)

a=np.zeros((3,7))    #array of zeros        [[0. 0. 0. 0. 0. 0. 0.]
                                           # [0. 0. 0. 0. 0. 0. 0.]
                                            #[0. 0. 0. 0. 0. 0. 0.]]

print(a)

b=np.ones((1,4))     #array of ones
print(b)                                  ## [[1. 1. 1. 1.]]

c=np.eye(7)          #create identical matrix
print(c)

d=np.arange(0,91,9)  #arrange---(start,stop,step)
print(d)             #[ 0  9 18 27 36 45 54 63 72 81 90]
e=np.arange(7,77,7)  #starts from 7 but jump 77 ie upto 70
print(e)             #[ 7 14 21 28 35 42 49 56 63 70]

a=np.linspace(0,1,5)   #linspace(start,stop,count of split)
print(a)               #[0.   0.25 0.5  0.75 1.  ]
b=np.linspace(0,10,5)
print(b)               #[ 0.   2.5  5.   7.5 10. ]


import numpy as np     #######this should be in the firts line for np#######
arr=np.array([[1,2,3],[4,5,6]])
print(arr)
print(arr[1,2])  #indexing 1 is[4,5,6] 2is 6in[4,5,6]
print(arr[:1])   #slicing---[[1 2 3]]
print(arr[1,:])  #[4 5 6]
print(arr.shape)
print(arr.reshape(3,2))
print(arr.flatten())  #flattens to one dimension----[1 2 3 4 5 6]
#--operations
a=np.array([1,2,3])
b=np.array([4,5,6])
print(a+b)
print(a*3)
c=np.array([[1],[2],[4]])      #3*1
d=np.array([6,7,8])          #1*3
print(c+d)
#[[ 7  8  9]
# [ 8  9 10]-----------------BROADCASTING
# [10 11 12]]
e=np.array([1,2,4])
f=np.array([[16],[17],[18]])
print(e+f)

#----->aggregate function<-------#
arr=np.array([[1,2],[3,4]])
print(arr.sum())                  #10
print(arr.mean())                 #2.5
print(arr.max(axis=0))            #[3 4]
print(np.median(arr))             #2.5

a=np.array([1,2,3,4,5])
mask=a>3
print(a[mask])                   #[4 5]



#-----------------PANDAS:POWERFUL PANEL DATA ANALYSIS LIBRARY------------------#

#    DATAFRAME:2D TABLE
import pandas as pd
dict={"name":["Yash","Manu","Liki"],"marks":["0","80","70"],"grade":["D","A","B"]}
#dataframe-->tabular form of data
#autoindexed,way to frame the data
df=pd.DataFrame(dict)
print(df)

import pandas as pd
dict = {
    "name": ["yash", "manusri", "likhitha", "arjun", "neha", "raj", "simran", "vikram"],
    "marks": ["0", "80", "70", "85", "90", "75", "60", "95"],
    "grade": ["b", "a", "c", "a", "a", "b", "c", "a"],
    "age": [14, 18, 20, 16, 19, 17, 15, 21]
}
df=pd.DataFrame(dict)   #converted to dataframe
print(df.head(4))

#_______DATA SELECTION
student_dict = {
    "name": ["yash", "manusri", "likhitha", "arjun", "neha", "raj", "simran", "vikram"],
    "marks": ["0", "80", "70", "85", "90", "75", "60", "95"],
    "grade": ["b", "a", "c", "a", "a", "b", "c", "a"],
    "age": [14, 18, 20, 16, 19, 17, 15, 21]
}
df=pd.DataFrame(student_dict)
print(df["grade"])
print(df.iloc[1])                     #give deatails of given index

#_________DATAFRAME OPERATIONS
df.drop("age",axis=1,inplace=True)    #axis=0--means---rows
print(df)                             #axis=1--means---columns

df=pd.DataFrame(student_dict)
duplicate_List=df.drop("age",axis=1,inplace=False)
print(df)
print(duplicate_List)
df.rename(columns={"marks":"percente"},inplace=True)
print(df)

#____________MISSING VALUES
import pandas as pd
import numpy as np
df=pd.DataFrame({
    "Name":["alice",None,"Charlie"],"Marks":[86,np.nan,95]})
print(df)
print(df.isnull())                   #give boolean
print(df.fillna(0))                  #fills the null values with zeroo
print(df.dropna(inplace=True))       #dlt the row
print(df)
print(df.describe())
#ans
#Name  Marks
#0    alice   86.0
#1     None    NaN
#2  Charlie   95.0
#None
#      Name  Marks
#0    alice   86.0
#2  Charlie   95.0

# describe___________
#          Marks
#count   2.000000
#mean   90.500000
#std     6.363961
#min    86.000000
#25%    88.250000
#50%    90.500000
#75%    92.750000
#max    95.000000

