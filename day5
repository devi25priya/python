import numpy as np   #creating numpy as an array
a=np.aaray([1,2,3,4])
print(a)
print(a.ndim)
print(a.shape)
print(a.dtype)

a=np.array(["abc",2,True,4.1])
print(a)
print(a.ndim)   #ndim---number of dimensions
print(a.shape)  #shape--rows*columns
print(a.dtype)   #u32 shows mixed datatype,64 if only integers

a=np.array([["abc",2,True,4.1],[1,2,3,4]])
print(a)
print(a.ndim)
print(a.shape)
print(a.dtype)

import numpy as np     #######this should be in the firts line for np#######

a=np.array([[[1,2],[2,3]],[[3,4],[4,5]]])
print(a)
print(a.ndim)
print(a.shape)
print(a.dtype)

a=np.zeros((3,7))    #array of zeros        [[0. 0. 0. 0. 0. 0. 0.]
                                           # [0. 0. 0. 0. 0. 0. 0.]
                                            #[0. 0. 0. 0. 0. 0. 0.]]

print(a)

b=np.ones((1,4))     #array of ones
print(b)                                  ## [[1. 1. 1. 1.]]

c=np.eye(7)          #create identical matrix
print(c)

d=np.arange(0,91,9)  #arrange---(start,stop,step)
print(d)             #[ 0  9 18 27 36 45 54 63 72 81 90]
e=np.arange(7,77,7)  #starts from 7 but jump 77 ie upto 70
print(e)             #[ 7 14 21 28 35 42 49 56 63 70]

a=np.linspace(0,1,5)   #linspace(start,stop,count of split)
print(a)               #[0.   0.25 0.5  0.75 1.  ]
b=np.linspace(0,10,5)
print(b)               #[ 0.   2.5  5.   7.5 10. ]


import numpy as np     #######this should be in the firts line for np#######
arr=np.array([[1,2,3],[4,5,6]])
print(arr)
print(arr[1,2])  #indexing 1 is[4,5,6] 2is 6in[4,5,6]
print(arr[:1])   #slicing---[[1 2 3]]
print(arr[1,:])  #[4 5 6]
print(arr.shape)
print(arr.reshape(3,2))
print(arr.flatten())  #flattens to one dimension----[1 2 3 4 5 6]
#--operations
a=np.array([1,2,3])
b=np.array([4,5,6])
print(a+b)
print(a*3)
c=np.array([[1],[2],[4]])      #3*1
d=np.array([6,7,8])          #1*3
print(c+d)
#[[ 7  8  9]
# [ 8  9 10]-----------------BROADCASTING
# [10 11 12]]
e=np.array([1,2,4])
f=np.array([[16],[17],[18]])
print(e+f)

#----->aggregate function<-------#
arr=np.array([[1,2],[3,4]])
print(arr.sum())                  #10
print(arr.mean())                 #2.5
print(arr.max(axis=0))            #[3 4]
print(np.median(arr))             #2.5

a=np.array([1,2,3,4,5])
mask=a>3
print(a[mask])                   #[4 5]



#-----------------PANDAS:POWERFUL PANEL DATA ANALYSIS LIBRARY------------------#

#    DATAFRAME:2D TABLE
import pandas as pd
dict={"name":["Yash","Manu","Liki"],"marks":["0","80","70"],"grade":["D","A","B"]}
#dataframe-->tabular form of data
#autoindexed,way to frame the data
df=pd.DataFrame(dict)
print(df)

import pandas as pd
dict = {
    "name": ["yash", "manusri", "likhitha", "arjun", "neha", "raj", "simran", "vikram"],
    "marks": ["0", "80", "70", "85", "90", "75", "60", "95"],
    "grade": ["b", "a", "c", "a", "a", "b", "c", "a"],
    "age": [14, 18, 20, 16, 19, 17, 15, 21]
}
df=pd.DataFrame(dict)   #converted to dataframe
print(df.head(4))

#_______DATA SELECTION
student_dict = {
    "name": ["yash", "manusri", "likhitha", "arjun", "neha", "raj", "simran", "vikram"],
    "marks": ["0", "80", "70", "85", "90", "75", "60", "95"],
    "grade": ["b", "a", "c", "a", "a", "b", "c", "a"],
    "age": [14, 18, 20, 16, 19, 17, 15, 21]
}
df=pd.DataFrame(student_dict)
print(df["grade"])
print(df.iloc[1])                     #give deatails of given index

#_________DATAFRAME OPERATIONS
df.drop("age",axis=1,inplace=True)    #axis=0--means---rows
print(df)                             #axis=1--means---columns

df=pd.DataFrame(student_dict)
duplicate_List=df.drop("age",axis=1,inplace=False)
print(df)
print(duplicate_List)
df.rename(columns={"marks":"percente"},inplace=True)
print(df)

#____________MISSING VALUES
import pandas as pd
import numpy as np
df=pd.DataFrame({
    "Name":["alice",None,"Charlie"],"Marks":[86,np.nan,95]})
print(df)
print(df.isnull())                   #give boolean
print(df.fillna(0))                  #fills the null values with zeroo
print(df.dropna(inplace=True))       #dlt the row
print(df)
print(df.describe())
#ans
#Name  Marks
#0    alice   86.0
#1     None    NaN
#2  Charlie   95.0
#None
#      Name  Marks
#0    alice   86.0
#2  Charlie   95.0

# describe___________
#          Marks
#count   2.000000
#mean   90.500000
#std     6.363961
#min    86.000000
#25%    88.250000
#50%    90.500000
#75%    92.750000
#max    95.000000


#______using GROUPBY--->
import pandas as pd
import numpy as np
df=pd.DataFrame({'Category':['A','B','C','A','B','A'],'Value':[10,15,12,20,18,14]})
print(df.groupby("Category")['Value'].mean())
#____________ans
Category
A    14.666667
B    16.500000
C    12.000000
Name: Value, dtype: float64


#first save student.csv and attach and then process
student_data=pd.read_csv("student.csv")
print(student_data)

#ans-----------
   student_id            name  age grade                       email
0           1      John Smith   18     A      john.smith@example.com
1           2   Emily Johnson   17    B+   emily.johnson@example.com
2           3   Michael Brown   19    A-   michael.brown@example.com
3           4     Sarah Davis   18     B     sarah.davis@example.com
4           5    David Wilson   17     A    david.wilson@example.com
5           6    Jennifer Lee   18    B+    jennifer.lee@example.com
6           7   Robert Miller   19     C   robert.miller@example.com
7           8     Lisa Taylor   17    A-     lisa.taylor@example.com
8           9  James Anderson   18     B  james.anderson@example.com
9          10    Megan Thomas   19     A    megan.thomas@example.com


#--------------REALWORLD EG:-STUDENT REPORT CARD-------------------#
data={
    "Student":["Amit","Sara","Neha"],
    "Math":[80,85,90],
    "Science":[75,99,80],
    "English":[78,70,45]
}
df=pd.DataFrame(data)
df["Average"]=df[["Math","Science","English"]].mean(axis=1)
print(df.sort_values(by="Average",ascending=False))
#---ans--->
  Student  Math  Science  English    Average
1    Sara    85       99       70  84.666667
0    Amit    80       75       78  77.666667
2    Neha    90       80       45  71.666667




#____________PANDA SERIES-------
#From list
s1=pd.Series([10,20,30,40])
#from list wth custome index
s2=pd.Series([100,200,300],index=['a','b','c'])
#from dictionary
s3=pd.Series({'x':5,'y':10,'z':15})
print(s1,s2,s3)

#---ans________
0    10
1    20
2    30
3    40
dtype: int64 a    100
b    200
c    300
dtype: int64 x     5
y    10
z    15
dtype: int64

#______SERIES ATTRIBUTES
print(s1.index)
print(s1.values)
print(s1.dtype)
print(s1.size)
print(s1.shape)

# RangeIndex(start=0, stop=4, step=1)
# [10 20 30 40]
# int64
# 4
# (4,)


 #_______ACCESSING SERIES DATA-slicing and indexing
print(s2['b'])
print(s2[1])
print(s2[['a','c']])
print(s2[0:2])

#----MODIFYING SERIES
s2['b']=250
s2['d']=400
s2.drop('a',inplace=True)

##########___________ANSWER OF THIS PART
0    10
1    20
2    30
3    40
dtype: int64 a    100
b    200
c    300
dtype: int64 x     5
y    10
z    15
dtype: int64
RangeIndex(start=0, stop=4, step=1)
[10 20 30 40]
int64
4
(4,)
200
200
a    100
c    300
dtype: int64
a    100
b    200
dtype: int64



#------------elementwise operation
s=pd.Series([1,2,3])
print(s+2)
print(s*10)
print(s**2)
#boolean indexing
t=pd.Series([5,10,15,20])
print(t[t>10])

#anssss----------
0    3
1    4
2    5
dtype: int64
0    10
1    20
2    30
dtype: int64
0    1
1    4
2    9
dtype: int64
2    15
3    20
dtype: int64



#___HANDLING MISSING VALUES-NANS
import pandas as pd
import numpy as np
s=pd.Series([10,None,30,np.nan])
print(s.isnull())
print(s.notnull())
s.fillna(0)
s.dropna()
#ANSWER------------------------->

#___HANDLING MISSING VALUES-NANS
import pandas as pd
import numpy as np
s=pd.Series([10,None,30,np.nan])
print(s.isnull())
print(s.notnull())
s.fillna(0)
s.dropna()


#-----DESCRIPTIVE STATISTICS
import pandas as pd
s=pd.Series([10,20,30,40,50])
print(s.sum())
print(s.mean())
print(s.min(),s.max())
print(s.std())
print(s.describe())
#answer  --------------------
150
30.0
10 50
15.811388300841896
count     5.000000
mean     30.000000
std      15.811388
min      10.000000
25%      20.000000
50%      30.000000
75%      40.000000
max      50.000000
dtype: float64




#string method on series
import pandas as pd
names=pd.Series(["Alice","bob","CHARLIE","dave"])
print(names.str.upper())
print(names.str.capitalize())
print(names.str.contains("a"))
#sorting and ranking
s=pd.Series([30,10,40,20],index=['d','b','a','c'])
print(s.sort_values())
print(s.sort_index())
print(s.rank())

#ANSWER------------------
0      ALICE
1        BOB
2    CHARLIE
3       DAVE
dtype: object
0      Alice
1        Bob
2    Charlie
3       Dave
dtype: object
0    False
1    False
2    False
3     True
dtype: bool
b    10
c    20
d    30
a    40
dtype: int64
a    40
b    10
c    20
d    30
dtype: int64
d    3.0
b    1.0
a    4.0
c    2.0
dtype: float64


#ARITHMETIC BETWEEN SERIES (INDEX ALIGNMENT)
s1=pd.Series([10,20,30],index=['a','b','c'])
s2=pd.Series([5,15,25],index=['b','c','d'])
print(s1+s2)

#ans
a     NaN
b    25.0
c    45.0
d     NaN
dtype: float64


####________plots graphh  1------------>
import matplotlib.pyplot as plt
x=[1,2,3,4,5]
y=[10,15,13,18,16]
plt.plot(x,y)
plt.title("Basic Line Plot")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.grid(True)
plt.show()



#3________graph 2
x=[1,2,3,4,5]
y1=[1,4,9,16,25]
y2=[25,16,9,4,1]
plt.plot(x,y1,label="Ascending")
plt.plot(x,y2,label="Descending")
plt.legend()
plt.show

#___graph 3
categories=['a','b','c','d']
values=[10,25,36,18]
plt.bar(categories,values,color='skyblue')
plt.title("Bar Chart Example")
plt.show()
